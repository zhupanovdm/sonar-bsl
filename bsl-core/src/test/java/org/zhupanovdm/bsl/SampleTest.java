package org.zhupanovdm.bsl;

import org.junit.Test;
import org.sonar.sslr.parser.LexerlessGrammar;
import org.sonar.sslr.tests.Assertions;
import org.zhupanovdm.bsl.grammar.BslGrammar;

import static org.zhupanovdm.bsl.grammar.BslGrammar.MODULE;

public class SampleTest {

    private final LexerlessGrammar g = BslGrammar.createGrammar();

    @Test
    public void test() {
        Assertions.assertThat(g.rule(MODULE))
                .matches(
                        "// Это комментарий\n" +
                        "&НаСервереБезКонтекста\n" +
                        "Процедура ЗаменаПериода(Знач Период = '20040101') Экспорт\n" +
                        "\n" +
                        "   Запрос = Новый Запрос;\n" +
                        "   Запрос.Текст = \"ВЫБРАТЬ\n" +
                        "   |   ОтветственныеЛицаОрганизации.Период,\n" +
                        "   |   ОтветственныеЛицаОрганизации.СтруктурнаяЕдиница,\n" +
                        "   |   ОтветственныеЛицаОрганизации.ОтветственноеЛицо\n" +
                        "   |ИЗ\n" +
                        "   |   РегистрСведений.ОтветственныеЛицаОрганизации КАК ОтветственныеЛицаОрганизации\n" +
                        "   |ГДЕ\n" +
                        "   |   ОтветственныеЛицаОрганизации.Период <= ДАТАВРЕМЯ(2005, 1, 1)\n" +
                        "   |   И ОтветственныеЛицаОрганизации.СтруктурнаяЕдиница.Наименование | ПОДОБНО \"\"Групп-Трейдинг\"\"\n" +
                        "   |   И (ОтветственныеЛицаОрганизации.Должность.Наименование ЕСТЬ NULL\n" +
                        "   |       ИЛИ НЕ(ОтветственныеЛицаОрганизации.Должность.Наименование | ПОДОБНО \"\"Продавец\"\"\n" +
                        "   |           ИЛИ ОтветственныеЛицаОрганизации.Должность.Наименование | ПОДОБНО \"\"Кладовщик\"\"))\";\n" +
                        "\n" +
                        "   Результат = Запрос.Выполнить();\n" +
                        "   Выборка = Результат.Выбрать();\n" +
                        "\n" +
                        "   Запись = РегистрыСведений.ОтветственныеЛицаОрганизации.СоздатьМенеджерЗаписи();\n" +
                        "\n" +
                        "   Пока Выборка.Следующий() Цикл\n" +
                        "       Запись.Период = Выборка.Период;\n" +
                        "       Запись.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;\n" +
                        "       Запись.ОтветственноеЛицо = Выборка.ОтветственноеЛицо;\n" +
                        "\n" +
                        "       Запись.Прочитать();\n" +
                        "\n" +
                        "       Если Запись.Выбран() Тогда\n" +
                        "           Запись.Период = Период;\n" +
                        "           Запись.Записать();\n" +
                        "       КонецЕсли;\n" +
                        "   КонецЦикла;\n" +
                        "\n" +
                        "КонецПроцедуры");
    }

}
